from requests import Response
from rest_framework import mixins, viewsets, status
from rest_framework.viewsets import ModelViewSet
from rest_framework.permissions import IsAuthenticated
from rest_framework import filters
from django_filters.rest_framework import DjangoFilterBackend
from django.utils.translation import gettext_lazy as _

from poupeai_finance_service.credit_cards.models import CreditCard, Invoice
from poupeai_finance_service.credit_cards.api.serializers import CreditCardSerializer
from poupeai_finance_service.users.api.permissions import IsProfileActive
from poupeai_finance_service.core.permissions import IsOwnerProfile
from poupeai_finance_service.users.querysets import get_profile_by_user
from poupeai_finance_service.credit_cards.api.serializers import InvoiceSerializer

class CreditCardViewSet(ModelViewSet):
    queryset = CreditCard.objects.all()
    serializer_class = CreditCardSerializer
    permission_classes = [IsAuthenticated, IsProfileActive]

    def get_queryset(self):
        user = self.request.user
        if user.is_authenticated:
            profile = get_profile_by_user(user)
            return self.queryset.filter(profile=profile).order_by('name')
        return self.queryset.none()

    def get_serializer_context(self):
        context = super().get_serializer_context()
        if self.request.user.is_authenticated:
            context['profile'] = get_profile_by_user(self.request.user)
        return context

class InvoiceViewSet(mixins.RetrieveModelMixin,
                     mixins.ListModelMixin,
                     viewsets.GenericViewSet):
    """
    Viewset for retrieving and listing Invoices.
    Invoices are primarily generated by the system for credit card transactions.
    """
    queryset = Invoice.objects.all()
    serializer_class = InvoiceSerializer
    permission_classes = [IsAuthenticated, IsOwnerProfile]
    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]
    ordering_fields = ['due_date', 'month', 'year', 'amount_paid']
    ordering = ['-year', '-month']

    def get_queryset(self):
        """
        Ensures a user can only see invoices related to their credit cards.
        """
        user_profile = self.request.user.profile
        return self.queryset.filter(credit_card__profile=user_profile)

    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        
        try:
            instance.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            return Response(
                {"detail": _(f"Error deleting invoice: {str(e)}")},
                status=status.HTTP_400_BAD_REQUEST
            )